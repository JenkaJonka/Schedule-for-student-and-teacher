import logging
import psycopg2
from aiogram import Bot, Dispatcher, types
from aiogram import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage


host = '-'
port = '-'
user = '-'
password = '-'
database = '-'

API_TOKEN = '-'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

role_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
role_keyboard.add(KeyboardButton('–°—Ç—É–¥–µ–Ω—Ç'))
role_keyboard.add(KeyboardButton('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'))
role_keyboard.add(KeyboardButton('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'))

logout_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
logout_keyboard.add(KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏'))




class teacherAuthState(StatesGroup):
    logteacher_auth = State()
    passteacher_auth = State()


class studentState(StatesGroup):
    logstudent = State()
    passstudent = State()
    date_input = State()
    logout = State()

class teacherState(StatesGroup):
    logteacher = State()
    passteacher = State()
    date_input_teacher = State()
    add_homework_date = State()
    add_homework_group = State()
    add_homework_task = State()
    logout_teacher = State()
    authentication = teacherAuthState

class teacherAuthenticatedState(StatesGroup):
    view_schedule = State()
    add_homework = State()
    enter_date = State()

class AddHomeworkState(StatesGroup):
    enter_date = State()
    enter_group = State()
    enter_task = State()

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –ö—Ç–æ –≤—ã?", reply_markup=role_keyboard)
####################################################–°–¢–£–î–ï–ù–¢########################################
@dp.message_handler(lambda message: message.text == "–°—Ç—É–¥–µ–Ω—Ç")
async def handle_student_role(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await student(message, chat_id, state)

async def student(message: types.Message, chat_id: int, state: FSMContext):
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")
    await studentState.logstudent.set()
    await state.update_data(chat_id=chat_id)

@dp.message_handler(state=studentState.logstudent)
async def handle_student_login(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    p_logstudent = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_data[chat_id] = {'p_logstudent': p_logstudent}

    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:")
    await studentState.passstudent.set()

@dp.message_handler(state=studentState.passstudent)
async def handle_student_password(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    p_password = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_data[chat_id]['p_password'] = p_password

    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await studentState.date_input.set()

@dp.message_handler(state=studentState.date_input)
async def handle_date_input(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    schedule_date_param = message.text

    if schedule_date_param.lower() == '–≤—ã–π—Ç–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏':
        await handle_logout(message, state)
        return

    await state.update_data(schedule_date_param=schedule_date_param)
    data = await state.get_data()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        p_logstudent = user_data[chat_id]['p_logstudent']
        p_password = user_data[chat_id]['p_password']

        conn = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)
        cursor = conn.cursor()

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ª–æ–≥–∏–Ω–æ–º, –ø–∞—Ä–æ–ª–µ–º –∏ –¥–∞—Ç–æ–π
        cursor.execute('SELECT * FROM get_student_schedule(%s, %s, %s)', (p_logstudent, p_password, data['schedule_date_param']))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        results = cursor.fetchall()

        cursor.close()
        conn.close()

        if results:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º
            grouped_results = group_by_date(results)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            group_number = results[0][5] if len(results[0]) > 5 else None
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            day_of_week = results[0][1] if len(results[0]) > 1 else None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã –∏ –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
            message_text = ""
            if group_number is not None:
                message_text += f"–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: {group_number}\n"
            if day_of_week is not None:
                message_text += f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day_of_week}\n"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            for date, data_for_date in grouped_results.items():
                message_text += format_date_schedule(date, data_for_date)

            await bot.send_message(chat_id, message_text, reply_markup=logout_keyboard)

        else:
            await bot.send_message(chat_id, f"–ù–∞ {schedule_date_param} –ø–∞—Ä –Ω–µ—Ç üò∫")

    except Exception as e:
        await bot.send_message(chat_id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏–ª–∏ –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        await bot.send_message(chat_id, f"–ù–∞–∂–º–∏—Ç–µ /start")
        await state.reset_state()



@dp.message_handler(lambda message: message.text == "–í—ã–π—Ç–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", state=studentState.date_input)
async def handle_logout(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    user_data.pop(chat_id, None)

    await state.finish()
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.", reply_markup=role_keyboard)

def group_by_date(results):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º."""
    grouped_results = {}
    for row in results:
        date = row[0]
        if date not in grouped_results:
            grouped_results[date] = []
        grouped_results[date].append(row[1:])
    return grouped_results

def format_date_schedule(date, schedule):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è."""
    if not schedule:
        return f"–ù–∞ {date} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç."

    date_schedule = f"üìÜ–î–∞—Ç–∞: {date}\n"
    for row in schedule:
        date_schedule += "\n"
        date_schedule += "–ù–æ–º–µ—Ä –ø–∞—Ä—ã: {}\n".format(row[3]) if len(row) > 0 else ""
        date_schedule += "üôÄ–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã: {}\n".format(row[1]) if len(row) > 1 else ""
        date_schedule += "üò∏–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—ã: {}\n".format(row[2]) if len(row) > 2 else ""
        date_schedule += "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: {}\n".format(row[5]) if len(row) > 3 else ""
        date_schedule += "üòª–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {}\n".format(row[6]) if len(row) > 4 else ""
        date_schedule += "–ê—É–¥–∏—Ç–æ—Ä–∏—è: {}\n".format(row[7]) if len(row) > 5 else ""
        date_schedule += "üòø–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {}\n".format(row[8]) if len(row) > 6 else ""
        date_schedule += "\n"

    return date_schedule



if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)