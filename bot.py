import logging
import psycopg2
from aiogram import Bot, Dispatcher, types
from aiogram import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage


host = 'localhost'
port = '5432'
user = 'postgres'
password = '123'
database = 'raspisanie'

API_TOKEN = '6558178432:AAHagj_sq34NbKggzuvOkj6JiV5PTKLX2Zc'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

role_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
role_keyboard.add(KeyboardButton('–°—Ç—É–¥–µ–Ω—Ç'))
role_keyboard.add(KeyboardButton('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'))
role_keyboard.add(KeyboardButton('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'))

logout_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
logout_keyboard.add(KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏'))




class teacherAuthState(StatesGroup):
    logteacher_auth = State()
    passteacher_auth = State()


class studentState(StatesGroup):
    logstudent = State()
    passstudent = State()
    date_input = State()
    logout = State()

class teacherState(StatesGroup):
    logteacher = State()
    passteacher = State()
    date_input_teacher = State()
    add_homework_date = State()
    add_homework_group = State()
    add_homework_task = State()
    logout_teacher = State()
    authentication = teacherAuthState

class teacherAuthenticatedState(StatesGroup):
    view_schedule = State()
    add_homework = State()
    enter_date = State()

class AddHomeworkState(StatesGroup):
    enter_date = State()
    enter_group = State()
    enter_task = State()

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –ö—Ç–æ –≤—ã?", reply_markup=role_keyboard)
####################################################–°–¢–£–î–ï–ù–¢########################################
@dp.message_handler(lambda message: message.text == "–°—Ç—É–¥–µ–Ω—Ç")
async def handle_student_role(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await student(message, chat_id, state)

async def student(message: types.Message, chat_id: int, state: FSMContext):
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")
    await studentState.logstudent.set()
    await state.update_data(chat_id=chat_id)

@dp.message_handler(state=studentState.logstudent)
async def handle_student_login(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    p_logstudent = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_data[chat_id] = {'p_logstudent': p_logstudent}

    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:")
    await studentState.passstudent.set()

@dp.message_handler(state=studentState.passstudent)
async def handle_student_password(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    p_password = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_data[chat_id]['p_password'] = p_password

    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await studentState.date_input.set()

@dp.message_handler(state=studentState.date_input)
async def handle_date_input(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    schedule_date_param = message.text

    if schedule_date_param.lower() == '–≤—ã–π—Ç–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏':
        await handle_logout(message, state)
        return

    await state.update_data(schedule_date_param=schedule_date_param)
    data = await state.get_data()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        p_logstudent = user_data[chat_id]['p_logstudent']
        p_password = user_data[chat_id]['p_password']

        conn = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)
        cursor = conn.cursor()

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ª–æ–≥–∏–Ω–æ–º, –ø–∞—Ä–æ–ª–µ–º –∏ –¥–∞—Ç–æ–π
        cursor.execute('SELECT * FROM get_student_schedule(%s, %s, %s)', (p_logstudent, p_password, data['schedule_date_param']))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        results = cursor.fetchall()

        cursor.close()
        conn.close()

        if results:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º
            grouped_results = group_by_date(results)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            group_number = results[0][5] if len(results[0]) > 5 else None
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            day_of_week = results[0][1] if len(results[0]) > 1 else None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã –∏ –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
            message_text = ""
            if group_number is not None:
                message_text += f"–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: {group_number}\n"
            if day_of_week is not None:
                message_text += f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day_of_week}\n"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            for date, data_for_date in grouped_results.items():
                message_text += format_date_schedule(date, data_for_date)

            await bot.send_message(chat_id, message_text, reply_markup=logout_keyboard)

        else:
            await bot.send_message(chat_id, f"–ù–∞ {schedule_date_param} –ø–∞—Ä –Ω–µ—Ç üò∫")

    except Exception as e:
        await bot.send_message(chat_id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏–ª–∏ –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        await bot.send_message(chat_id, f"–ù–∞–∂–º–∏—Ç–µ /start")
        await state.reset_state()



@dp.message_handler(lambda message: message.text == "–í—ã–π—Ç–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", state=studentState.date_input)
async def handle_logout(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    user_data.pop(chat_id, None)

    await state.finish()
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.", reply_markup=role_keyboard)

def group_by_date(results):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º."""
    grouped_results = {}
    for row in results:
        date = row[0]
        if date not in grouped_results:
            grouped_results[date] = []
        grouped_results[date].append(row[1:])
    return grouped_results

def format_date_schedule(date, schedule):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è."""
    if not schedule:
        return f"–ù–∞ {date} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç."

    date_schedule = f"üìÜ–î–∞—Ç–∞: {date}\n"
    for row in schedule:
        date_schedule += "\n"
        date_schedule += "–ù–æ–º–µ—Ä –ø–∞—Ä—ã: {}\n".format(row[3]) if len(row) > 0 else ""
        date_schedule += "üôÄ–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã: {}\n".format(row[1]) if len(row) > 1 else ""
        date_schedule += "üò∏–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—ã: {}\n".format(row[2]) if len(row) > 2 else ""
        date_schedule += "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: {}\n".format(row[5]) if len(row) > 3 else ""
        date_schedule += "üòª–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {}\n".format(row[6]) if len(row) > 4 else ""
        date_schedule += "–ê—É–¥–∏—Ç–æ—Ä–∏—è: {}\n".format(row[7]) if len(row) > 5 else ""
        date_schedule += "üòø–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {}\n".format(row[8]) if len(row) > 6 else ""
        date_schedule += "\n"

    return date_schedule
#######################################–ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨#################################################################

@dp.message_handler(lambda message: message.text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
async def handle_teacher_role(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")
    await teacherAuthState.logteacher_auth.set()
    await state.update_data(chat_id=chat_id)


@dp.message_handler(state=teacherAuthState.logteacher_auth)
async def handle_teacher_login_auth(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    p_logteacher_auth = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ user_data
    user_data[chat_id] = {'p_logteacher_auth': p_logteacher_auth}

    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:")
    await teacherAuthState.passteacher_auth.set()

async def authenticate_teacher(chat_id):
    try:
        p_logteacher_auth = user_data[chat_id]['p_logteacher_auth']
        p_password_auth = user_data[chat_id]['p_password_auth']

        conn = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ä–æ–ª—å—é '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'
        cursor.execute('SELECT * FROM –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å WHERE –õ–æ–≥–∏–Ω = %s AND –ü–∞—Ä–æ–ª—å = %s AND –†–æ–ª—å = %s', (p_logteacher_auth, p_password_auth, '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'))

        result = cursor.fetchone()

        cursor.close()
        conn.close()

        return result is not None

    except Exception as e:
        print(e)
        return False

@dp.message_handler(state=teacherAuthState.passteacher_auth)
async def handle_teacher_password_auth(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    p_password_auth = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å–ª–æ–≤–∞—Ä–µ user_data
    user_data[chat_id]['p_password_auth'] = p_password_auth

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if await authenticate_teacher(chat_id):
        await bot.send_message(chat_id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'))
        keyboard.add(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'))
        keyboard.add(KeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏'))

        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        await teacherAuthenticatedState.view_schedule.set()
    else:
        await bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.finish()

@dp.message_handler(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", state=teacherAuthenticatedState.view_schedule)
async def handle_view_schedule(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await teacherAuthenticatedState.enter_date.set()

@dp.message_handler(state=teacherAuthenticatedState.enter_date)
async def handle_teacher_enter_date(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    schedule_date_param = message.text

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è user_data
        p_logteacher_auth = user_data[chat_id]['p_logteacher_auth']
        p_password_auth = user_data[chat_id]['p_password_auth']

        conn = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)
        cursor = conn.cursor()

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ª–æ–≥–∏–Ω–æ–º, –ø–∞—Ä–æ–ª–µ–º –∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        cursor.execute('SELECT * FROM get_teacher_schedule(%s, %s, %s)', (p_logteacher_auth, p_password_auth, schedule_date_param))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
        results = cursor.fetchall()

        cursor.close()
        conn.close()

        if results:
            grouped_results = group_by_date(results)

            # –í—ã–≤–æ–¥–∏–º –¥–∞—Ç—É –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            message_text = f"–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {schedule_date_param}:\n\n"
            day_of_week = results[0][1] if len(results[0]) > 1 else None
            if day_of_week is not None:
                message_text += f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day_of_week}\n"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            for date, data_for_date in grouped_results.items():
                message_text += f"\nüìÜ–î–∞—Ç–∞: {date}\n"

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º
                sorted_data_for_date = sorted(data_for_date, key=lambda x: x[3])

                for row in sorted_data_for_date:
                    message_text += "–ù–æ–º–µ—Ä –ø–∞—Ä—ã: {}\n".format(row[3]) if len(row) > 0 else ""
                    message_text += "üôÄ–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã: {}\n".format(row[1]) if len(row) > 1 else ""
                    message_text += "üò∏–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {}\n".format(row[2]) if len(row) > 2 else ""
                    message_text += "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: {}\n".format(row[4]) if len(row) > 3 else ""
                    message_text += "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: {}\n".format(row[5]) if len(row) > 4 else ""
                    message_text += "–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {}\n".format(row[7]) if len(row) > 5 else ""
                    message_text += "üòª–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {}\n".format(row[8]) if len(row) > 6 else ""
                    message_text += "\n"

            await bot.send_message(chat_id, message_text, reply_markup=logout_keyboard)

        else:
            await bot.send_message(chat_id, f"–ù–∞ {schedule_date_param} —É –≤–∞—Å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π üò∫")

    except Exception as e:
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ù–∞–∂–º–∏—Ç–µ /start")
        await state.finish()

@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", state=teacherAuthenticatedState.view_schedule)
async def handle_add_homework(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await AddHomeworkState.enter_date.set()

@dp.message_handler(state=AddHomeworkState.enter_date)
async def handle_enter_date_for_homework(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    date_input = message.text

    await state.update_data(date_input=date_input)
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
    await AddHomeworkState.enter_group.set()

@dp.message_handler(state=AddHomeworkState.enter_group)
async def handle_enter_group_for_homework(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    group_number = message.text

    await state.update_data(group_number=group_number)
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    await AddHomeworkState.enter_task.set()

@dp.message_handler(state=AddHomeworkState.enter_task)
async def handle_enter_task_for_homework(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    task_text = message.text

    data = await state.get_data()
    date_input = data['date_input']
    group_number = data['group_number']

    # –í—ã–∑–æ–≤ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    try:
        conn = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)
        cursor = conn.cursor()
        cursor.execute('CALL add_homework(%s, %s, %s, %s, %s)', (user_data[chat_id]['p_logteacher_auth'], user_data[chat_id]['p_password_auth'], data['date_input'], data['group_number'], task_text))
        conn.commit()
        cursor.close()
        conn.close()

        await bot.send_message(chat_id, "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ù–∞–∂–º–∏—Ç–µ /start")

    except Exception as e:
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        print(e)

    finally:
        await state.finish()

@dp.message_handler(lambda message: message.text == "–í—ã–π—Ç–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", state=teacherAuthenticatedState.view_schedule)
async def handle_logout_teacher(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    # Remove user data for the current chat_id
    user_data.pop(chat_id, None)

    await state.finish()  # Finish the current state
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.", reply_markup=role_keyboard)
###################–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†###############################################################################
class AddUserState(StatesGroup):
    enter_login = State()
    enter_password = State()
    enter_role = State()

class AdminState(StatesGroup):
    logadmin = State()
    passadmin = State()
    date_input_admin = State()
    start_admin = State()
    add_user = State()
    add_student = State()
    add_teacher = State()

class AddStudentState(StatesGroup):
    enter_user_id = State()
    enter_student_name = State()
    enter_group_number = State()

class AddTeacherState(StatesGroup):
    enter_user_id = State()
    enter_teacher_name = State()
    enter_teacher_email = State()
    

@dp.message_handler(lambda message: message.text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
async def handle_admin_role(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await admin_authentication(message, chat_id, state)

async def admin_authentication(message: types.Message, chat_id: int, state: FSMContext):
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")
    await AdminState.logadmin.set()
    await state.update_data(chat_id=chat_id)

@dp.message_handler(state=AdminState.logadmin)
async def handle_admin_login(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    p_logadmin = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_data[chat_id] = {'p_logadmin': p_logadmin}

    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:")
    await AdminState.passadmin.set()

@dp.message_handler(state=AdminState.passadmin)
async def handle_admin_password(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    p_passadmin = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_data[chat_id]['p_passadmin'] = p_passadmin

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        p_logadmin = user_data[chat_id]['p_logadmin']
        p_passadmin = user_data[chat_id]['p_passadmin']

        conn = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        cursor.execute('SELECT –†–æ–ª—å FROM "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" WHERE "–õ–æ–≥–∏–Ω" = %s AND "–ü–∞—Ä–æ–ª—å" = %s', (p_logadmin, p_passadmin))
        role = cursor.fetchone()

        if role and role[0] == '–∞–¥–º–∏–Ω':
            await AdminState.start_admin.set()  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤—ã—à–µ
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
            keyboard.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞"))
            keyboard.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"))
            await bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=keyboard)
        else:
            await bot.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏–ª–∏ –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
            await state.reset_state()

    except Exception as e:
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.reset_state()

    finally:
        cursor.close()
        conn.close()

@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", state=AdminState.start_admin)
async def add_user_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await AddUserState.enter_login.set()

@dp.message_handler(state=AddUserState.enter_login)
async def enter_login_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    new_user_login = message.text
    await state.update_data(new_user_login=new_user_login)
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await AddUserState.enter_password.set()

@dp.message_handler(state=AddUserState.enter_password)
async def enter_password_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    new_user_password = message.text
    await state.update_data(new_user_password=new_user_password)
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await AddUserState.enter_role.set()

@dp.message_handler(state=AddUserState.enter_role)
async def enter_role_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    new_user_role = message.text
    await state.update_data(new_user_role=new_user_role)

    user_data = await state.get_data()
    new_user_login = user_data.get("new_user_login")
    new_user_password = user_data.get("new_user_password")
    new_user_role = user_data.get("new_user_role")

    try:
        conn = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)
        cursor = conn.cursor()

        cursor.execute(f'INSERT INTO "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" ("–õ–æ–≥–∏–Ω", "–ü–∞—Ä–æ–ª—å", "–†–æ–ª—å") VALUES (%s, %s, %s) RETURNING "ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"', (new_user_login, new_user_password, new_user_role))
        new_user_id = cursor.fetchone()[0]
        conn.commit()

        await bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_user_id}, –ª–æ–≥–∏–Ω–æ–º {new_user_login} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é {new_user_role}.")
        await state.reset_state()
    finally:
        cursor.close()
        conn.close()

# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞"
@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
async def add_student_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:")
    await AddStudentState.enter_user_id.set()

@dp.message_handler(state=AddStudentState.enter_user_id)
async def enter_user_id_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    user_id = message.text
    await state.update_data(user_id=user_id)
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞:")
    await AddStudentState.enter_student_name.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞
@dp.message_handler(state=AddStudentState.enter_student_name)
async def enter_student_name_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    student_name = message.text
    await state.update_data(student_name=student_name)
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
    await AddStudentState.enter_group_number.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
@dp.message_handler(state=AddStudentState.enter_group_number)
async def enter_group_number_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    group_number = message.text

    # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    user_id = user_data.get("user_id")
    student_name = user_data.get("student_name")
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)
        cursor = conn.cursor()

        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É "–°—Ç—É–¥–µ–Ω—Ç"
        insert_student_query = '''
            INSERT INTO "–°—Ç—É–¥–µ–Ω—Ç" ("ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–§–ò–û_—Å—Ç—É–¥–µ–Ω—Ç–∞", "–ù–æ–º–µ—Ä_–≥—Ä—É–ø–ø—ã")
            VALUES (%s, %s, %s);
        '''
        cursor.execute(insert_student_query, (user_id, student_name, group_number))
        conn.commit()

        await bot.send_message(chat_id, f"–°—Ç—É–¥–µ–Ω—Ç {student_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_number}.")
        await state.reset_state()
        
    except Exception as e:
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.reset_state()


    finally:
        cursor.close()
        conn.close()

@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
async def add_teacher_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await AddTeacherState.enter_user_id.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=AddTeacherState.enter_user_id)
async def enter_user_id_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    user_id = message.text
    await state.update_data(user_id=user_id)
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    await AddTeacherState.enter_teacher_name.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=AddTeacherState.enter_teacher_name)
async def enter_teacher_name_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    teacher_name = message.text
    await state.update_data(teacher_name=teacher_name)
    await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    await AddTeacherState.enter_teacher_email.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=AddTeacherState.enter_teacher_email)
async def enter_teacher_email_handler(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    teacher_email = message.text

    # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    user_id = user_data.get("user_id")
    teacher_name = user_data.get("teacher_name")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)
        cursor = conn.cursor()

        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        cursor.execute(
            'INSERT INTO "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" ("ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–§–ò–û_–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", "–ü–æ—á—Ç–∞") VALUES (%s, %s, %s)',
            (user_id, teacher_name, teacher_email)
        )
        conn.commit()

        await bot.send_message(chat_id, f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {teacher_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø–æ—á—Ç–æ–π {teacher_email}.")
        await state.reset_state()

    except Exception as e:
        await bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.reset_state()

    finally:
        cursor.close()
        conn.close()


if __name__ == '__main__':
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)